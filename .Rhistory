g_assemblages_bpg %>% layout_as_bipartite()
g_assemblages_bpg %>%
ggraph(layout = g_assemblages_bpg_layout) +
geom_edge_link(edge_color = "gray", edge_alpha = 0.25) +
geom_node_point(aes(color = type)) +
scale_color_manual(
values = c("green", "blue"),
name = "Node Type",
breaks = c(FALSE, TRUE),
labels = c("Provenience", "Artifact")
) +
ggtitle("Bipartite network of Provenience and Artifact Type")
#| echo: false
#| message: false
require(tidyverse)
require(igraph)
require(ggraph)
# Import data from file ---------------------------------------------------
dat <- read_csv("Catalog_SiteA.csv",
col_select = c(LEVEL_ID, CODE))
# Create un-weighted bipartite graph --------------------------------------
g_assemblages_bpg <-
graph_from_data_frame(unique.data.frame(select(dat, LEVEL_ID, CODE)),
directed = FALSE)
V(g_assemblages_bpg)$type <-
bipartite_mapping(g_assemblages_bpg)$type
#| label: fig-bipartite-graph
#| fig-cap: "Bipartite network of Provenience and Artifact Type."
#| fig-alt: "Bipartite graph plot of proveniences and artifact types."
#| echo: false
#| message: false
#| warning: false
g_assemblages_bpg_layout <-
g_assemblages_bpg %>% layout_as_bipartite()
g_assemblages_bpg %>%
ggraph(layout = g_assemblages_bpg_layout) +
geom_edge_link(edge_color = "gray", edge_alpha = 0.25) +
geom_node_point(aes(color = type)) +
scale_color_manual(
values = c("green", "blue"),
name = "Node Type",
breaks = c(FALSE, TRUE),
labels = c("Provenience", "Artifact")
) +
ggtitle("Bipartite network of Provenience and Artifact Type")
require(tidyverse)
require(igraph)
require(ggraph)
# Read in edgelist into data frame
dat <- read_csv("Catalog_SiteA.csv",
col_select = c(LEVEL_ID, CODE))
# Create graph
g_assemblages_bpg <-
graph_from_data_frame(unique.data.frame(dat),
directed = FALSE)
# Assign bipartite node types
V(g_assemblages_bpg)$type <-
bipartite_mapping(g_assemblages_bpg)$type
#| fig-width: 8
#| fig-cap: "Bipartite graph of artifact-provenience connections."
# Plot bipartite graph
g_assemblages_bpg %>%
ggraph(layout = "bipartite") +
geom_edge_link(color = "gray", alpha = 0.25) +
geom_node_point(aes(color = type), size = 2) +
scale_color_manual(
values = c("green", "blue"),
name = "Node Type",
breaks = c(FALSE, TRUE),
labels = c("Provenience", "Artifact")) +
ggtitle("Bipartite network of Provenience and Artifact Type")
g_assemblages_bpg_inc <- as_incidence_matrix(g_assemblages_bpg)
# View the first few rows and columns
g_assemblages_bpg_inc[1:5, 1:15]
# Szymkiewicz-Simpson overlap coefficient for binary incidence matrices
overlap_coef_bin <- function(x) {
# Calculate the pairwise sums of non-zero matrix elements to find the number
# of intersecting elements between each input column
bin_intersect_mat <- t(x) %*% x
# Calculate the input column sums to find the individual size of each set
col_sum <- apply(x, 2, function(xx)
sum(xx != 0))
# Find the smaller of each pair of sets by taking the matrix outer minimum
min_set_size_mat <- outer(col_sum, col_sum, FUN = pmin)
# Szymkiewicz-Simpson overlap coefficient is the pairwise intersection of two
# sets divided by the size of the smaller set
ssoc <- bin_intersect_mat / min_set_size_mat
# Set diagonal to identity
diag(ssoc) <- 1
# Assign input column names to rows and columns of return matrix
dimnames(ssoc) <- list(colnames(x), colnames(x))
return(ssoc)
}
# Jaccard/Tanimoto similarity index for binary incidence matrices
jaccard_sim_bin <- function(x) {
# Calculate the pairwise sums of non-zero matrix elements to find the number
# of intersecting elements between each input column
bin_intersect_mat <- t(x) %*% x
# Calculate the input column sums to find the individual size of each set
x_col_sum <- apply(x, 2, function(xx)
sum(xx != 0))
# Calculate the matrix outer sums for pairwise sum of set sizes
set_size_sum_mat <- outer(x_col_sum, x_col_sum, FUN = "+")
# Jaccard index is intersection of set sizes over the size of the union of
# sets
jacc <- bin_intersect_mat / (set_size_sum_mat - bin_intersect_mat)
# Set diagonal to identity
diag(jacc) <- 1
# Assign input column names to rows and columns of return matrix
dimnames(jacc) <- list(colnames(x), colnames(x))
return(jacc)
}
# Sørensen–Dice Coefficient for binary incidence matrices
soren_dice_sim_bin <- function(x) {
# Calculate the pairwise sums of non-zero matrix elements to find the number
# of intersecting elements between each input column
bin_intersect_mat <- t(x) %*% x
# Calculate the input column sums, to find the individual size of each set
col_sum <- apply(x, 2, function(xx)
sum(xx != 0))
# Calculate the matrix outer sums for pairwise sum of set sizes
set_size_sum_mat <- outer(col_sum, col_sum, FUN = "+")
# Sorenson-Dice index is twice the size of the intersection divided by the
# sum of the size for each set
sd <- (2 * bin_intersect_mat) / set_size_sum_mat
# Set diagonal to identity
diag(sd) <- 1
# Assign input column names to rows and columns of return matrix
dimnames(sd) <- list(colnames(x), colnames(x))
return(sd)
}
#| fig-cap: "Sample size distributions for provenience and artifact types."
require(gridExtra)
grid.arrange(
ggplot(
data = data.frame(x = rowSums(g_assemblages_bpg_inc)),
aes(x = x)) +
geom_histogram(color = "gray", fill = "green", bins = 20) +
ggtitle("Artifact Types per Provenience"),
ggplot(
data = data.frame(x = colSums(g_assemblages_bpg_inc)),
aes(x = x)) +
geom_histogram(color = "gray", fill = "blue", bins = 20) +
ggtitle("Occurence per Artifact Type"),
ncol = 2
)
# Overlap coefficient, provenience
prov_adj_ssoc <- overlap_coef_bin(t(g_assemblages_bpg_inc))
prov_ssoc_vals <-
prov_adj_ssoc[lower.tri(prov_adj_ssoc, diag = FALSE)]
# Jaccard, provenience
prov_adj_jacc <- jaccard_sim_bin(t(g_assemblages_bpg_inc))
prov_jacc_vals <-
prov_adj_jacc[lower.tri(prov_adj_jacc, diag = FALSE)]
# Sorenson-Dice
prov_adj_sd <- soren_dice_sim_bin(t(g_assemblages_bpg_inc))
prov_sd_vals <-
prov_adj_sd[lower.tri(prov_adj_sd, diag = FALSE)]
# Make data frame to compare
prov_sims <-
data.frame(ssoc = prov_ssoc_vals,
jacc = prov_jacc_vals,
sd = prov_sd_vals)
# Plot densities by similarity measure
prov_sims %>% stack() %>%
ggplot(aes(x = values)) +
geom_density(color = "green",
alpha = 0.4) +
facet_grid(ind ~ ., scales = "fixed")
# Overlap coefficient, artifact types
artifact_adj_ssoc <- overlap_coef_bin(g_assemblages_bpg_inc)
artifact_ssoc_vals <-
artifact_adj_ssoc[lower.tri(artifact_adj_ssoc, diag = FALSE)]
# Jaccard, artifact types
artifact_adj_jacc <- jaccard_sim_bin(g_assemblages_bpg_inc)
artifact_jacc_vals <-
artifact_adj_jacc[lower.tri(artifact_adj_jacc, diag = FALSE)]
#Sorenson-Dice, artifact types
artifact_adj_sd <- soren_dice_sim_bin(g_assemblages_bpg_inc)
artifact_sd_vals <-
artifact_adj_sd[lower.tri(artifact_adj_sd, diag = FALSE)]
# Make data frame to compare
artifact_sims <-
data.frame(ssoc = artifact_ssoc_vals,
jacc = artifact_jacc_vals,
sd = artifact_sd_vals)
# Plot densities by similarity measure
artifact_sims %>% stack() %>%
ggplot(aes(x = values)) +
geom_density(color = "blue",
alpha = 0.4) +
facet_grid(ind ~ ., scales = "free")
# Plot densities by similarity measure, excluding zeroes
artifact_sims %>% stack() %>%
filter(values > 0) %>% # Exclude zeroes
ggplot(aes(x = values)) +
geom_density(color = "blue",
alpha = 0.4) +
facet_grid(ind ~ ., scales = "free")
# Plot densities by similarity measure
artifact_sims %>% stack() %>%
ggplot(aes(x = values)) +
geom_density(color = "blue",
alpha = 0.4) +
facet_grid(ind ~ ., scales = "fixed")
# Plot densities by similarity measure, excluding zeroes
artifact_sims %>% stack() %>%
filter(values > 0) %>% # Exclude zeroes
ggplot(aes(x = values)) +
geom_density(color = "blue",
alpha = 0.4) +
facet_grid(ind ~ ., scales = "fixed")
#| label: fig-sim-prov
#| fig-cap: "Similarity measures for Proveniences."
#| fig-alt: "Similarity measures for Proveniences."
#| echo: false
#| message: false
#| warning: false
# Plot densities by similarity measure
prov_sims %>% stack() %>%
ggplot(aes(x = values)) +
geom_density(color = "green",
alpha = 0.4) +
facet_grid(ind ~ ., scales = "fixed") +
ggtitle("Similarity measures for Proveniences")
#| label: fig-sim-prov
#| fig-cap: "Similarity measures for artifact types."
#| fig-alt: "Similarity measures for artifact types."
#| echo: false
#| message: false
#| warning: false
# Plot densities by similarity measure
artifact_sims %>% stack() %>%
ggplot(aes(x = values)) +
geom_density(color = "green",
alpha = 0.4) +
facet_grid(ind ~ ., scales = "fixed") +
ggtitle("Similarity Measures for Artifact Types")
#| label: fig-sim-prov
#| fig-cap: "Similarity measures for artifact types."
#| fig-alt: "Similarity measures for artifact types."
#| echo: false
#| message: false
#| warning: false
# Plot densities by similarity measure
artifact_sims %>% stack() %>%
ggplot(aes(x = values)) +
geom_density(color = "blue",
alpha = 0.4) +
facet_grid(ind ~ ., scales = "fixed") +
ggtitle("Similarity Measures for Artifact Types")
#| label: fig-sim-prov
#| fig-cap: "Similarity measures for artifact types."
#| fig-alt: "Similarity measures for artifact types."
#| echo: false
#| message: false
#| warning: false
# Plot densities by similarity measure
artifact_sims %>% stack() %>%
ggplot(aes(x = values)) +
geom_density(color = "blue",
alpha = 0.4) +
facet_grid(ind ~ ., scales = "free") +
ggtitle("Similarity Measures for Artifact Types")
#| label: fig-sim-prov
#| fig-cap: "Similarity measures for proveniences."
#| fig-alt: "Similarity measures for proveniences."
#| echo: false
#| message: false
#| warning: false
# Plot densities by similarity measure
prov_sims %>% stack() %>%
ggplot(aes(x = values)) +
geom_density(color = "green",
alpha = 0.4) +
facet_grid(ind ~ ., scales = "free") +
ggtitle("Similarity Measures for Proveniences")
require(tidyverse)
require(igraph)
require(ggraph)
dat <- read_csv("Catalog_SiteA.csv",
col_select = c(LEVEL_ID, CODE)
)
#| fig-width: 8
#| fig-cap: "Bipartite graph of artifact-provenience connections."
g_assemblages_bpg <-
graph_from_data_frame(unique.data.frame(dat),
directed = FALSE
)
V(g_assemblages_bpg)$type <-
bipartite_mapping(g_assemblages_bpg)$type
g_assemblages_bpg %>%
ggraph(layout = "bipartite") +
geom_edge_link(color = "gray", alpha = 0.25) +
geom_node_point(aes(color = type), size = 2) +
scale_color_manual(
values = c("green", "blue"),
name = "Node Type",
breaks = c(FALSE, TRUE),
labels = c("Provenience", "Artifact")
)
g_assemblages_bpg
assemblages_inc <- as_incidence_matrix(g_assemblages_bpg)
assemblages_inc[1:5, 1:15]
assemblage_projections <-
bipartite_projection(g_assemblages_bpg, multiplicity = TRUE)
assemblage_projections
g_assemblage_prov <- assemblage_projections$proj1
g_assemblage_artifact <- assemblage_projections$proj2
#| fig-cap: "Projected graph of provenience."
g_assemblage_prov %>%
ggraph(layout = "fr") +
geom_edge_link(aes(alpha = weight)) +
geom_node_point(color = "green", size = 2)
#| fig-cap: "Projected graph of artifact types."
g_assemblage_artifact %>%
ggraph(layout = "fr") +
geom_edge_link(aes(alpha = weight)) +
geom_node_point(color = "blue", size = 2)
plot(density(degree(g_assemblage_prov)), col = "green",
main = "Distribution of Provenience Degree")
plot(density(E(g_assemblage_prov)$weight, bw = 1), col = "green",
main = "Distribution of Provenience Edge Weights")
plot(density(degree(g_assemblage_artifact)), col = "blue",
main = "Distribution of Artifact Degree")
plot(density(E(g_assemblage_artifact)$weight, bw = 1), col = "blue",
main = "Distribution of Artifact Edge Weights")
#| label: fig-sim-prov
#| fig-cap: "Similarity measures for proveniences."
#| fig-alt: "Similarity measures for proveniences."
#| echo: false
#| message: false
#| warning: false
# Plot densities by similarity measure
prov_sims %>% stack() %>%
ggplot(aes(x = values)) +
geom_density(color = "green",
alpha = 0.4) +
facet_grid(ind ~ ., scales = "free") +
ggtitle("Similarity Measures for Proveniences")
#| label: fig-sim-prov
#| fig-cap: "Similarity measures for artifact types."
#| fig-alt: "Similarity measures for artifact types."
#| echo: false
#| message: false
#| warning: false
# Plot densities by similarity measure
artifact_sims %>% stack() %>%
ggplot(aes(x = values)) +
geom_density(color = "blue",
alpha = 0.4) +
facet_grid(ind ~ ., scales = "free") +
ggtitle("Similarity Measures for Artifact Types")
#| label: fig-sim-prov
#| fig-cap: "Similarity measures for proveniences."
#| fig-alt: "Similarity measures for proveniences."
#| echo: false
#| message: false
#| warning: false
# Plot densities by similarity measure
prov_sims %>% stack() %>%
ggplot(aes(x = values)) +
geom_density(color = "green",
alpha = 0.4) +
facet_grid(ind ~ ., scales = "free") +
ggtitle("Similarity Measures for Proveniences")
#| label: fig-sim-artifact
#| fig-cap: "Similarity measures for artifact types."
#| fig-alt: "Similarity measures for artifact types."
#| echo: false
#| message: false
#| warning: false
# Plot densities by similarity measure
artifact_sims %>% stack() %>%
ggplot(aes(x = values)) +
geom_density(color = "blue",
alpha = 0.4) +
facet_grid(ind ~ ., scales = "free") +
ggtitle("Similarity Measures for Artifact Types")
#| echo: false
#| message: false
#| warning: false
# Create incidence matrix from bipartite graph -----------------------------
g_assemblages_bpg_inc <- as_incidence_matrix(g_assemblages_bpg)
# Project one-mode graphs, Szymkiewicz-Simpson -----------------------------
overlap_coef_bin <- function(x) {
# Calculate the pairwise sums of non-zero matrix elements to find the number
# of intersecting elements between each input column
bin_intersect_mat <- t(x) %*% x
# Calculate the input column sums to find the individual size of each set
col_sum <- apply(x, 2, function(xx)
sum(xx != 0))
# Find the smaller of each pair of sets by taking the matrix outer minimum
min_set_size_mat <- outer(col_sum, col_sum, FUN = pmin)
# Szymkiewicz-Simpson overlap coefficient is the pairwise intersection of two
# sets divided by the size of the smaller set
res <- bin_intersect_mat / min_set_size_mat
# Set diagonal to identity
diag(res) <- 1L
# Assign input column names to rows and columns of return matrix
dimnames(res) <- list(colnames(x), colnames(x))
return(res)
}
## Project provenience -----------------------------------------------------
prov_adj_ssoc <- overlap_coef_bin(t(g_assemblages_bpg_inc))
prov_ssoc_vals <-
prov_adj_ssoc[lower.tri(prov_adj_ssoc, diag = FALSE)]
## Project artifact types --------------------------------------------------
artifact_adj_ssoc <- overlap_coef_bin(g_assemblages_bpg_inc)
artifact_ssoc_vals <-
artifact_adj_ssoc[lower.tri(artifact_adj_ssoc, diag = FALSE)]
# Project one-mode graphs, Sorenson-Dice -----------------------------------
soren_dice_sim_bin <- function(x) {
# Calculate the pairwise sums of non-zero matrix elements to find the number
# of intersecting elements between each input column
bin_intersect_mat <- t(x) %*% x
# Calculate the input column sums, to find the individual size of each set
col_sum <- apply(x, 2, function(xx)
sum(xx != 0))
# Calculate the matrix outer sums for pairwise sum of set sizes
set_size_sum_mat <- outer(col_sum, col_sum, FUN = "+")
# Sorenson-Dice index is twice the size of the intersection divided by the
# sum of the size for each set
res <- (2 * bin_intersect_mat) / set_size_sum_mat
# Set diagonal to identity
diag(res) <- 1L
# Assign input column names to rows and columns of return matrix
dimnames(res) <- list(colnames(x), colnames(x))
return(res)
}
## Project provenience -----------------------------------------------------
prov_adj_sd <- soren_dice_sim_bin(t(g_assemblages_bpg_inc))
prov_sd_vals <-
prov_adj_sd[lower.tri(prov_adj_sd, diag = FALSE)]
## Project artifact types --------------------------------------------------
artifact_adj_sd <- soren_dice_sim_bin(g_assemblages_bpg_inc)
artifact_sd_vals <-
artifact_adj_sd[lower.tri(artifact_adj_sd, diag = FALSE)]
# Project one-mode graphs, Jaccard ----------------------------------------
jaccard_sim_bin <- function(x) {
# Calculate the pairwise sums of non-zero matrix elements to find the number
# of intersecting elements between each input column
bin_intersect_mat <- t(x) %*% x
# Calculate the input column sums to find the individual size of each set
x_col_sum <- apply(x, 2, function(xx)
sum(xx != 0))
# Calculate the matrix outer sums for pairwise sum of set sizes
set_size_sum_mat <- outer(x_col_sum, x_col_sum, FUN = "+")
# Jaccard index is intersection of set sizes over the size of the union of
# sets
res <- bin_intersect_mat / (set_size_sum_mat - bin_intersect_mat)
# Set diagonal to identity
diag(res) <- 1L
# Assign input column names to rows and columns of return matrix
dimnames(res) <- list(colnames(x), colnames(x))
return(res)
}
## Project provenience -----------------------------------------------------
prov_adj_jacc <- jaccard_sim_bin(t(g_assemblages_bpg_inc))
prov_jacc_vals <-
prov_adj_jacc[lower.tri(prov_adj_jacc, diag = FALSE)]
## Project artifact types --------------------------------------------------
artifact_adj_jacc <- jaccard_sim_bin(g_assemblages_bpg_inc)
artifact_jacc_vals <-
artifact_adj_jacc[lower.tri(artifact_adj_jacc, diag = FALSE)]
# Comparing similarity measures -------------------------------------------
prov_sims <-
data.frame(ssoc = prov_ssoc_vals,
jacc = prov_jacc_vals,
sd = prov_sd_vals)
artifact_sims <-
data.frame(ssoc = artifact_ssoc_vals,
jacc = artifact_jacc_vals,
sd = artifact_sd_vals)
#| label: fig-sim-prov
#| fig-cap: "Similarity measures for proveniences."
#| fig-alt: "Similarity measures for proveniences."
#| echo: false
#| message: false
#| warning: false
# Plot densities by similarity measure
prov_sims %>% stack() %>%
ggplot(aes(x = values)) +
geom_density(color = "green",
alpha = 0.4) +
facet_grid(ind ~ ., scales = "free") +
ggtitle("Similarity Measures for Proveniences")
#| label: fig-sim-artifact
#| fig-cap: "Similarity measures for artifact types."
#| fig-alt: "Similarity measures for artifact types."
#| echo: false
#| message: false
#| warning: false
# Plot densities by similarity measure
artifact_sims %>% stack() %>%
ggplot(aes(x = values)) +
geom_density(color = "blue",
alpha = 0.4) +
facet_grid(ind ~ ., scales = "free") +
ggtitle("Similarity Measures for Artifact Types")
55*40
2200*4
8800*6
8800*12
115000/12
9583.33/4
2395.83/40
55*40*4*8
55*2080
2080/40
52*37.5
80300/1950

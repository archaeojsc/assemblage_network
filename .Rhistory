#| label: fig-sim-artifact
#| fig-cap: "Similarity measures for artifact types."
#| fig-alt: "Similarity measures for artifact types."
#| echo: false
#| message: false
#| warning: false
# Plot densities by similarity measure
artifact_sims %>% stack() %>%
ggplot(aes(x = values)) +
geom_density(color = "blue",
alpha = 0.4) +
facet_grid(ind ~ ., scales = "free") +
ggtitle("Similarity Measures for Artifact Types")
#| label: fig-power-law
#| fig-cap: "Power-law distribution for different values for gamma."
#| fig-alt: "Power-law distribution for different values for gamma."
#| echo: false
#| message: false
#| warning: false
ggplot(data.frame(x = c(1,251)), aes(x = x)) +
stat_function(fun = powerlaw_pdf, args = list(gamma = 1), aes(color = "1")) +
stat_function(fun = powerlaw_pdf, args = list(gamma = 2), aes(color = "2")) +
stat_function(fun = powerlaw_pdf, args = list(gamma = 3), aes(color = "3")) +
stat_function(fun = powerlaw_pdf, args = list(gamma = 4), aes(color = "4")) +
stat_function(fun = powerlaw_pdf, args = list(gamma = 5), aes(color = "5")) +
scale_y_continuous(trans="log10") +
labs(color="Gamma")+
ylab("log P(x)")
#| label: fig-power-law
#| fig-cap: "Power-law distribution for different values for gamma."
#| fig-alt: "Power-law distribution for different values for gamma."
#| echo: false
#| message: false
#| warning: false
ggplot(data.frame(x = c(1,251)), aes(x = x)) +
stat_function(fun = powerlaw_pdf, args = list(gamma = 1), aes(color = "1")) +
stat_function(fun = powerlaw_pdf, args = list(gamma = 2), aes(color = "2")) +
stat_function(fun = powerlaw_pdf, args = list(gamma = 3), aes(color = "3")) +
stat_function(fun = powerlaw_pdf, args = list(gamma = 4), aes(color = "4")) +
stat_function(fun = powerlaw_pdf, args = list(gamma = 5), aes(color = "5")) +
# scale_y_continuous(trans="log10") +
labs(color="Gamma")+
ylab("log P(x)")
#| label: fig-power-law
#| fig-cap: "Power-law distribution for different values for gamma."
#| fig-alt: "Power-law distribution for different values for gamma."
#| echo: false
#| message: false
#| warning: false
ggplot(data.frame(x = c(1,251)), aes(x = x)) +
stat_function(fun = powerlaw_pdf, args = list(gamma = 2), aes(color = "2")) +
stat_function(fun = powerlaw_pdf, args = list(gamma = 3), aes(color = "3")) +
stat_function(fun = powerlaw_pdf, args = list(gamma = 4), aes(color = "4")) +
stat_function(fun = powerlaw_pdf, args = list(gamma = 5), aes(color = "5")) +
stat_function(fun = powerlaw_pdf, args = list(gamma = 1), aes(color = "6")) +
scale_y_continuous(trans="log10") +
labs(color="Gamma")+
ylab("log P(x)")
#| label: fig-power-law
#| fig-cap: "Power-law distribution for different values for gamma."
#| fig-alt: "Power-law distribution for different values for gamma."
#| echo: false
#| message: false
#| warning: false
ggplot(data.frame(x = c(1,251)), aes(x = x)) +
stat_function(fun = powerlaw_pdf, args = list(gamma = 2), aes(color = "2")) +
stat_function(fun = powerlaw_pdf, args = list(gamma = 3), aes(color = "3")) +
stat_function(fun = powerlaw_pdf, args = list(gamma = 4), aes(color = "4")) +
stat_function(fun = powerlaw_pdf, args = list(gamma = 5), aes(color = "5")) +
stat_function(fun = powerlaw_pdf, args = list(gamma = 6), aes(color = "6")) +
scale_y_continuous(trans="log10") +
labs(color="Gamma")+
ylab("log P(x)")
#| label: fig-power-law
#| fig-cap: "Power-law distribution for different values for gamma."
#| fig-alt: "Power-law distribution for different values for gamma."
#| echo: false
#| message: false
#| warning: false
powerlaw_pdf <- function(x, gamma = 1){
density <- x^(-gamma)
return(density)
}
ggplot(data.frame(x = c(1,251)), aes(x = x)) +
stat_function(fun = powerlaw_pdf, args = list(gamma = 2), aes(color = "2")) +
stat_function(fun = powerlaw_pdf, args = list(gamma = 3), aes(color = "3")) +
stat_function(fun = powerlaw_pdf, args = list(gamma = 4), aes(color = "4")) +
stat_function(fun = powerlaw_pdf, args = list(gamma = 5), aes(color = "5")) +
stat_function(fun = powerlaw_pdf, args = list(gamma = 6), aes(color = "6")) +
scale_y_continuous(trans="log10") +
labs(color="Gamma")+
ylab("log P(x)")
#| label: fig-power-law
#| fig-cap: "Power-law distribution for different values for gamma."
#| fig-alt: "Power-law distribution for different values for gamma."
#| echo: false
#| message: false
#| warning: false
powerlaw_pdf <- function(x, gamma = 1) {
density <- x ^ (-gamma)
return(density)
}
ggplot(data.frame(x = c(1, 251)), aes(x = x)) +
stat_function(fun = powerlaw_pdf, args = list(gamma = 2), aes(color = "2")) +
stat_function(fun = powerlaw_pdf, args = list(gamma = 3), aes(color = "3")) +
stat_function(fun = powerlaw_pdf, args = list(gamma = 4), aes(color = "4")) +
stat_function(fun = powerlaw_pdf, args = list(gamma = 5), aes(color = "5")) +
stat_function(fun = powerlaw_pdf, args = list(gamma = 6), aes(color = "6")) +
# scale_y_continuous(trans="log10") +
labs(color = "Gamma") +
ylab("P(x)")
# ylab("log P(x)")
#| label: fig-power-law
#| fig-cap: "Power-law distribution for different values for gamma."
#| fig-alt: "Power-law distribution for different values for gamma."
#| echo: false
#| message: false
#| warning: false
powerlaw_pdf <- function(x, gamma = 1) {
density <- x ^ (-gamma)
return(density)
}
ggplot(data.frame(x = c(1, 251)), aes(x = x)) +
stat_function(fun = powerlaw_pdf, args = list(gamma = 2), aes(color = "2")) +
stat_function(fun = powerlaw_pdf, args = list(gamma = 3), aes(color = "3")) +
stat_function(fun = powerlaw_pdf, args = list(gamma = 4), aes(color = "4")) +
stat_function(fun = powerlaw_pdf, args = list(gamma = 5), aes(color = "5")) +
stat_function(fun = powerlaw_pdf, args = list(gamma = 6), aes(color = "6")) +
# scale_y_continuous(trans="log10") +
labs(color = "Gamma") +
ylab("P(x)")
# ylab("log P(x)")
#| label: fig-power-law-log
#| fig-cap: "Log-scale power-law distribution for different values for gamma."
#| fig-alt: "Log-scale power-law distribution for different values for gamma."
#| echo: false
#| message: false
#| warning: false
ggplot(data.frame(x = c(1, 251)), aes(x = x)) +
stat_function(fun = powerlaw_pdf, args = list(gamma = 2), aes(color = "2")) +
stat_function(fun = powerlaw_pdf, args = list(gamma = 3), aes(color = "3")) +
stat_function(fun = powerlaw_pdf, args = list(gamma = 4), aes(color = "4")) +
stat_function(fun = powerlaw_pdf, args = list(gamma = 5), aes(color = "5")) +
stat_function(fun = powerlaw_pdf, args = list(gamma = 6), aes(color = "6")) +
scale_y_continuous(trans="log10") +
labs(color = "Gamma") +
ylab("log P(x)")
View(artifact_adj_ssoc)
test <- pickSoftThreshold.fromSimilarity(artifact_adj_jacc, verbose = 5)
test
plot(test$fitIndices[, 1],
test$fitIndices[, 5],
xlab = "Soft Threshold (power)",
ylab = "Mean Connectivity",
type = "n",
main = paste("Mean connectivity")
)
text(test$fitIndices[, 1],
test$fitIndices[, 5],
labels = powers,
cex = cex1, col = "red")
plot(test$fitIndices[, 1],
test$fitIndices[, 5],
xlab = "Soft Threshold (power)",
ylab = "Mean Connectivity",
type = "n",
main = paste("Mean connectivity")
)
text(test$fitIndices[, 1],
test$fitIndices[, 5],
labels = c(c(1:10), seq(from = 12, to = 20, by = 2)),
cex = cex1, col = "red")
plot(test$fitIndices[, 1],
test$fitIndices[, 5],
xlab = "Soft Threshold (power)",
ylab = "Mean Connectivity",
type = "n",
main = paste("Mean connectivity")
)
text(test$fitIndices[, 1],
test$fitIndices[, 5],
labels = c(c(1:10), seq(from = 12, to = 20, by = 2)),
cex = .9, col = "red")
plot(test$fitIndices[, 1],
-sign(test$fitIndices[, 3]) * test$fitIndices[, 2],
xlab = "Soft Threshold (power)",
ylab = "Scale Free Topology Model Fit, signed R^2",
main = paste("Scale independence")
)
text(test$fitIndices[, 1],
-sign(test$fitIndices[, 3]) * test$fitIndices[, 2],
labels = c(seq(1, 10, by = 1), seq(12, 20, by = 2)), cex = 0.9, col = "red"
)
abline(h = 0.85, col = "red")
test <- pickSoftThreshold.fromSimilarity(artifact_adj_ssoc, verbose = 5)
plot(test$fitIndices[, 1],
-sign(test$fitIndices[, 3]) * test$fitIndices[, 2],
xlab = "Soft Threshold (power)",
ylab = "Scale Free Topology Model Fit, signed R^2",
main = paste("Scale independence")
)
text(test$fitIndices[, 1],
-sign(test$fitIndices[, 3]) * test$fitIndices[, 2],
labels = c(seq(1, 10, by = 1), seq(12, 20, by = 2)), cex = 0.9, col = "red"
)
abline(h = 0.85, col = "red")
test <- pickSoftThreshold.fromSimilarity(artifact_adj_sd, verbose = 5)
plot(test$fitIndices[, 1],
-sign(test$fitIndices[, 3]) * test$fitIndices[, 2],
xlab = "Soft Threshold (power)",
ylab = "Scale Free Topology Model Fit, signed R^2",
main = paste("Scale independence")
)
text(test$fitIndices[, 1],
-sign(test$fitIndices[, 3]) * test$fitIndices[, 2],
labels = c(seq(1, 10, by = 1), seq(12, 20, by = 2)), cex = 0.9, col = "red"
)
abline(h = 0.85, col = "red")
test <- pickSoftThreshold.fromSimilarity(prov_adj_sd, verbose = 5)
test <- pickSoftThreshold.fromSimilarity(prov_adj_ssoc, verbose = 5)
test <- pickSoftThreshold.fromSimilarity(prov_adj_jacc, verbose = 5)
test <- pickSoftThreshold.fromSimilarity(prov_adj_jacc, verbose = 5, moreNetworkConcepts = TRUE)
test <- pickSoftThreshold.fromSimilarity(prov_adj_ssoc, verbose = 5, moreNetworkConcepts = TRUE)
plot(test$fitIndices[, 1],
-sign(test$fitIndices[, 3]) * test$fitIndices[, 2],
xlab = "Soft Threshold (power)",
ylab = "Scale Free Topology Model Fit, signed R^2",
main = paste("Scale independence")
)
text(test$fitIndices[, 1],
-sign(test$fitIndices[, 3]) * test$fitIndices[, 2],
labels = c(seq(1, 10, by = 1), seq(12, 20, by = 2)), cex = 0.9, col = "red"
)
abline(h = 0.85, col = "red")
plot(test$fitIndices[, 1],
test$fitIndices[, 5],
xlab = "Soft Threshold (power)",
ylab = "Mean Connectivity",
type = "n",
main = paste("Mean connectivity")
)
text(test$fitIndices[, 1],
test$fitIndices[, 5],
labels = c(c(1:10), seq(from = 12, to = 20, by = 2)),
cex = .9, col = "red")
plot(test$fitIndices[, 1],
-sign(test$fitIndices[, 3]) * test$fitIndices[, 2],
xlab = "Soft Threshold (power)",
ylab = "Scale Free Topology Model Fit, signed R^2",
main = paste("Scale independence")
)
text(test$fitIndices[, 1],
-sign(test$fitIndices[, 3]) * test$fitIndices[, 2],
labels = c(seq(1, 10, by = 1), seq(12, 20, by = 2)), cex = 0.9, col = "red"
)
abline(h = 0.85, col = "red")
test <- pickSoftThreshold(g_assemblages_bpg_inc, verbose = 5, moreNetworkConcepts = TRUE)
plot(test$fitIndices[, 1],
-sign(test$fitIndices[, 3]) * test$fitIndices[, 2],
xlab = "Soft Threshold (power)",
ylab = "Scale Free Topology Model Fit, signed R^2",
main = paste("Scale independence")
)
text(test$fitIndices[, 1],
-sign(test$fitIndices[, 3]) * test$fitIndices[, 2],
labels = c(seq(1, 10, by = 1), seq(12, 20, by = 2)), cex = 0.9, col = "red"
)
abline(h = 0.85, col = "red")
plot(test$fitIndices[, 1],
test$fitIndices[, 5],
xlab = "Soft Threshold (power)",
ylab = "Mean Connectivity",
type = "n",
main = paste("Mean connectivity")
)
text(test$fitIndices[, 1],
test$fitIndices[, 5],
labels = c(c(1:10), seq(from = 12, to = 20, by = 2)),
cex = .9, col = "red")
test <- pickSoftThreshold(t(g_assemblages_bpg_inc), verbose = 5, moreNetworkConcepts = TRUE)
plot(test$fitIndices[, 1],
test$fitIndices[, 5],
xlab = "Soft Threshold (power)",
ylab = "Mean Connectivity",
type = "n",
main = paste("Mean connectivity")
)
text(test$fitIndices[, 1],
test$fitIndices[, 5],
labels = c(c(1:10), seq(from = 12, to = 20, by = 2)),
cex = .9, col = "red")
plot(test$fitIndices[, 1],
-sign(test$fitIndices[, 3]) * test$fitIndices[, 2],
xlab = "Soft Threshold (power)",
ylab = "Scale Free Topology Model Fit, signed R^2",
main = paste("Scale independence")
)
text(test$fitIndices[, 1],
-sign(test$fitIndices[, 3]) * test$fitIndices[, 2],
labels = c(seq(1, 10, by = 1), seq(12, 20, by = 2)), cex = 0.9, col = "red"
)
abline(h = 0.85, col = "red")
ggplot(data = data.frame(x = degree(g_assemblages_proj_prov_oc)), aes(x = x)) +
geom_density(color = "green") +
ggtitle("Distribution of Szymkiewicz-Simpson Degree for Proveniences")
pickSoftThreshold.fromSimilarity()
pickSoftThreshold.fromSimilarity
checkSimilarity
checkAdjMat
pickSoftThreshold
plot(artifact_sims$jacc, sigmoid(artifact_sims$jacc))
plot(sigmoid(artifact_sims$jacc))
plot(sigmoid(sort(artifact_sims$jacc)))
plot(sigmoid(sort(artifact_sims$ssoc)))
plot(sigmoid(sort(artifact_sims$sd)))
plot(sigmoid(sort(prov_sims$ssoc)))
plot(sigmoid(sort(prov_sims$ssoc^6)))
plot(sigmoid(sort(prov_sims$sd)))
plot(sigmoid(sort(prov_sims$jacc)))
plot(sigmoid(sort(prov_sims$jacc)), type = h)
plot(sigmoid(sort(prov_sims$jacc)), type = "h")
plot(sigmoid(sort(prov_sims$sd)), type = "h")
plot(sigmoid(sort(prov_sims$ssoc)), type = "h")
#| label: code-bpg
#| echo: false
#| message: false
require(tidyverse)
require(igraph)
require(ggraph)
# Import data from file ---------------------------------------------------
dat <- read_csv("Catalog_SiteA.csv",
col_select = c(LEVEL_ID, CODE))
# Create un-weighted bipartite graph --------------------------------------
g_assemblages_bpg <-
graph_from_data_frame(unique.data.frame(select(dat, LEVEL_ID, CODE)),
directed = FALSE)
V(g_assemblages_bpg)$type <-
bipartite_mapping(g_assemblages_bpg)$type
#| label: fig-bipartite-graph
#| fig-cap: "Bipartite network of Provenience and Artifact Type."
#| fig-alt: "Bipartite graph plot of proveniences and artifact types."
#| echo: false
#| message: false
#| warning: false
g_assemblages_bpg_layout <-
g_assemblages_bpg %>% layout_as_bipartite()
g_assemblages_bpg %>%
ggraph(layout = g_assemblages_bpg_layout) +
geom_edge_link(edge_color = "gray", edge_alpha = 0.25) +
geom_node_point(aes(color = type)) +
scale_color_manual(
values = c("green", "blue"),
name = "Node Type",
breaks = c(FALSE, TRUE),
labels = c("Provenience", "Artifact")
) +
ggtitle("Bipartite network of Provenience and Artifact Type")
#| label: code-reestablish-environment
#| echo: false
#| message: false
#| warning: false
# Create incidence matrix from bipartite graph -----------------------------
g_assemblages_bpg_inc <- as_incidence_matrix(g_assemblages_bpg)
# Project one-mode graphs, Szymkiewicz-Simpson -----------------------------
overlap_coef_bin <- function(x) {
# Calculate the pairwise sums of non-zero matrix elements to find the number
# of intersecting elements between each input column
bin_intersect_mat <- t(x) %*% x
# Calculate the input column sums to find the individual size of each set
col_sum <- apply(x, 2, function(xx)
sum(xx != 0))
# Find the smaller of each pair of sets by taking the matrix outer minimum
min_set_size_mat <- outer(col_sum, col_sum, FUN = pmin)
# Szymkiewicz-Simpson overlap coefficient is the pairwise intersection of two
# sets divided by the size of the smaller set
res <- bin_intersect_mat / min_set_size_mat
# Set diagonal to identity
diag(res) <- 1L
# Assign input column names to rows and columns of return matrix
dimnames(res) <- list(colnames(x), colnames(x))
return(res)
}
## Project provenience -----------------------------------------------------
prov_adj_ssoc <- overlap_coef_bin(t(g_assemblages_bpg_inc))
prov_ssoc_vals <-
prov_adj_ssoc[lower.tri(prov_adj_ssoc, diag = FALSE)]
## Project artifact types --------------------------------------------------
artifact_adj_ssoc <- overlap_coef_bin(g_assemblages_bpg_inc)
artifact_ssoc_vals <-
artifact_adj_ssoc[lower.tri(artifact_adj_ssoc, diag = FALSE)]
# Project one-mode graphs, Sorenson-Dice -----------------------------------
soren_dice_sim_bin <- function(x) {
# Calculate the pairwise sums of non-zero matrix elements to find the number
# of intersecting elements between each input column
bin_intersect_mat <- t(x) %*% x
# Calculate the input column sums, to find the individual size of each set
col_sum <- apply(x, 2, function(xx)
sum(xx != 0))
# Calculate the matrix outer sums for pairwise sum of set sizes
set_size_sum_mat <- outer(col_sum, col_sum, FUN = "+")
# Sorenson-Dice index is twice the size of the intersection divided by the
# sum of the size for each set
res <- (2 * bin_intersect_mat) / set_size_sum_mat
# Set diagonal to identity
diag(res) <- 1L
# Assign input column names to rows and columns of return matrix
dimnames(res) <- list(colnames(x), colnames(x))
return(res)
}
## Project provenience -----------------------------------------------------
prov_adj_sd <- soren_dice_sim_bin(t(g_assemblages_bpg_inc))
prov_sd_vals <-
prov_adj_sd[lower.tri(prov_adj_sd, diag = FALSE)]
## Project artifact types --------------------------------------------------
artifact_adj_sd <- soren_dice_sim_bin(g_assemblages_bpg_inc)
artifact_sd_vals <-
artifact_adj_sd[lower.tri(artifact_adj_sd, diag = FALSE)]
# Project one-mode graphs, Jaccard ----------------------------------------
jaccard_sim_bin <- function(x) {
# Calculate the pairwise sums of non-zero matrix elements to find the number
# of intersecting elements between each input column
bin_intersect_mat <- t(x) %*% x
# Calculate the input column sums to find the individual size of each set
x_col_sum <- apply(x, 2, function(xx)
sum(xx != 0))
# Calculate the matrix outer sums for pairwise sum of set sizes
set_size_sum_mat <- outer(x_col_sum, x_col_sum, FUN = "+")
# Jaccard index is intersection of set sizes over the size of the union of
# sets
res <- bin_intersect_mat / (set_size_sum_mat - bin_intersect_mat)
# Set diagonal to identity
diag(res) <- 1L
# Assign input column names to rows and columns of return matrix
dimnames(res) <- list(colnames(x), colnames(x))
return(res)
}
## Project provenience -----------------------------------------------------
prov_adj_jacc <- jaccard_sim_bin(t(g_assemblages_bpg_inc))
prov_jacc_vals <-
prov_adj_jacc[lower.tri(prov_adj_jacc, diag = FALSE)]
## Project artifact types --------------------------------------------------
artifact_adj_jacc <- jaccard_sim_bin(g_assemblages_bpg_inc)
artifact_jacc_vals <-
artifact_adj_jacc[lower.tri(artifact_adj_jacc, diag = FALSE)]
# Comparing similarity measures -------------------------------------------
prov_sims <-
data.frame(ssoc = prov_ssoc_vals,
jacc = prov_jacc_vals,
sd = prov_sd_vals)
artifact_sims <-
data.frame(ssoc = artifact_ssoc_vals,
jacc = artifact_jacc_vals,
sd = artifact_sd_vals)
#| label: fig-sim-prov
#| fig-cap: "Similarity measures for proveniences."
#| fig-alt: "Similarity measures for proveniences."
#| echo: false
#| message: false
#| warning: false
# Plot densities by similarity measure
prov_sims %>% stack() %>%
ggplot(aes(x = values)) +
geom_density(color = "green",
alpha = 0.4) +
facet_grid(ind ~ ., scales = "free") +
ggtitle("Similarity Measures for Proveniences")
#| label: fig-sim-artifact
#| fig-cap: "Similarity measures for artifact types."
#| fig-alt: "Similarity measures for artifact types."
#| echo: false
#| message: false
#| warning: false
# Plot densities by similarity measure
artifact_sims %>% stack() %>%
ggplot(aes(x = values)) +
geom_density(color = "blue",
alpha = 0.4) +
facet_grid(ind ~ ., scales = "free") +
ggtitle("Similarity Measures for Artifact Types")
#| label: fig-power-law
#| fig-cap: "Power-law distribution for different values of gamma."
#| fig-alt: "Power-law distribution for different values of gamma."
#| echo: false
#| message: false
#| warning: false
powerlaw_pdf <- function(x, gamma = 1) {
density <- x ^ (-gamma)
return(density)
}
ggplot(data.frame(x = c(1, 251)), aes(x = x)) +
stat_function(fun = powerlaw_pdf, args = list(gamma = 2), aes(color = "2")) +
stat_function(fun = powerlaw_pdf, args = list(gamma = 3), aes(color = "3")) +
stat_function(fun = powerlaw_pdf, args = list(gamma = 4), aes(color = "4")) +
stat_function(fun = powerlaw_pdf, args = list(gamma = 5), aes(color = "5")) +
stat_function(fun = powerlaw_pdf, args = list(gamma = 6), aes(color = "6")) +
labs(color = "Gamma") +
ylab("P(x)")
#| label: fig-power-law-log
#| fig-cap: "Log-scale power-law distribution for different values of gamma."
#| fig-alt: "Log-scale power-law distribution for different values of gamma."
#| echo: false
#| message: false
#| warning: false
ggplot(data.frame(x = c(1, 251)), aes(x = x)) +
stat_function(fun = powerlaw_pdf, args = list(gamma = 2), aes(color = "2")) +
stat_function(fun = powerlaw_pdf, args = list(gamma = 3), aes(color = "3")) +
stat_function(fun = powerlaw_pdf, args = list(gamma = 4), aes(color = "4")) +
stat_function(fun = powerlaw_pdf, args = list(gamma = 5), aes(color = "5")) +
stat_function(fun = powerlaw_pdf, args = list(gamma = 6), aes(color = "6")) +
scale_y_continuous(trans="log10") +
labs(color = "Gamma") +
ylab("log P(x)")

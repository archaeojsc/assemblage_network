labs(color = "Gamma") +
ylab("log P(k)") + xlab("k")
hard_threshold_adj <- function(x, tau) {
return(ifelse(x < tau, 0, 1))
}
degree_distribution(test_g)
degree_distribution(test_g, loops=T)
sum(degree_distribution(test_g, loops=T))
hist(degree_distribution(test_g, loops=T))
hist(degree_distribution(test_g, cumulative = T))
plot(degree_distribution(test_g, cumulative = T))
plot(degree_distribution(test_g, cumulative = T), log = "xy")
plot(degree_distribution(test_g, cumulative = T), log = "xy", type = "h")
plot(degree_distribution(test_g, cumulative = T), log = "xy", type = "l", col="red")
log(0)
plot(degree_distribution(test_g, cumulative = T)^6, log = "xy", type = "l", col="red")
plot(degree_distribution(test_g, cumulative = T), log = "xy", type = "l", col="red")
test <- signum_adj(artifact_adj_jacc, quantile(artifact_sims$jacc, probs = 0.95))
test_g <- igraph::graph_from_adjacency_matrix(test, mode = "undirected", weighted = NULL, diag=FALSE)
plot(degree_distribution(test_g, cumulative = T), log = "xy", type = "l", col="red")
test_g
test <- signum_adj(artifact_adj_sd, quantile(artifact_sims$sd, probs = 0.95))
test_g <- igraph::graph_from_adjacency_matrix(test, mode = "undirected", weighted = NULL, diag=FALSE)
test_g
test <- signum_adj(artifact_adj_ssoc, quantile(artifact_sims$ssoc, probs = 0.95))
test_g <- igraph::graph_from_adjacency_matrix(test, mode = "undirected", weighted = NULL, diag=FALSE)
test_g
plot(degree_distribution(test_g, cumulative = T), log = "xy", type = "l", col="red")
plot(test_g, layout=layout_in_circle)
plot(test_g, layout=layout_in_circle, size=1)
plot(test_g, layout=layout_in_circle, vertex.size=1)
test <- signum_adj(artifact_adj_jacc, quantile(artifact_sims$jacc, probs = 0.95))
test_g <- igraph::graph_from_adjacency_matrix(test, mode = "undirected", weighted = NULL, diag=FALSE)
plot(test_g, layout=layout_in_circle, vertex.size=1)
plot(test_g, layout=layout.graphopt, vertex.size=1)
plot(test_g, layout=layout.graphopt, vertex.size=2, label=NA)
plot(test_g, layout=layout.graphopt, vertex.size=2, vertex.label=NA)
plot(test_g, layout="nicely", vertex.size=2, vertex.label=NA)
plot(test_g, layout=layout_nicely, vertex.size=2, vertex.label=NA)
plot(test_g, layout=layout_with_kk, vertex.size=2, vertex.label=NA)
plot(test_g, layout=layout_with_gem, vertex.size=2, vertex.label=NA)
plot(test_g, layout=layout_with_fr, vertex.size=2, vertex.label=NA)
test <- signum_adj(artifact_adj_jacc, quantile(artifact_sims$jacc, probs = 0.99))
test_g <- igraph::graph_from_adjacency_matrix(test, mode = "undirected", weighted = NULL, diag=FALSE)
plot(test_g, layout=layout_with_fr, vertex.size=2, vertex.label=NA)
test <- signum_adj(artifact_adj_ssoc, quantile(artifact_sims$ssoc, probs = 0.99))
test_g <- igraph::graph_from_adjacency_matrix(test, mode = "undirected", weighted = NULL, diag=FALSE)
plot(test_g, layout=layout_with_fr, vertex.size=2, vertex.label=NA)
test <- signum_adj(artifact_adj_sd, quantile(artifact_sims$sd, probs = 0.99))
test_g <- igraph::graph_from_adjacency_matrix(test, mode = "undirected", weighted = NULL, diag=FALSE)
plot(test_g, layout=layout_with_fr, vertex.size=2, vertex.label=NA)
test <- signum_adj(artifact_adj_sd, quantile(artifact_sims$sd, probs = 0.95))
test_g <- igraph::graph_from_adjacency_matrix(test, mode = "undirected", weighted = NULL, diag=FALSE)
plot(test_g, layout=layout_with_fr, vertex.size=2, vertex.label=NA)
plot(test_g, layout=layout_with_kk, vertex.size=2, vertex.label=NA)
plot(test_g, layout=layout_graphopt, vertex.size=2, vertex.label=NA)
plot(test_g, layout=layout_nicely, vertex.size=2, vertex.label=NA)
plot(test_g, layout=layout_with_fr, vertex.size=2, vertex.label=NA)
test <- signum_adj(artifact_adj_sd, quantile(artifact_sims$sd, probs = 0.99))
test_g <- igraph::graph_from_adjacency_matrix(test, mode = "undirected", weighted = NULL, diag=FALSE)
plot(test_g, layout=layout_with_fr, vertex.size=2, vertex.label=NA)
plot(degree_distribution(test_g, cumulative = T), log = "xy", type = "l", col="red")
#| label: code-bpg
#| echo: false
#| message: false
require(tidyverse)
require(igraph)
require(ggraph)
# Import data from file ---------------------------------------------------
dat <- read_csv("Catalog_SiteA.csv",
col_select = c(LEVEL_ID, CODE))
# Create un-weighted bipartite graph --------------------------------------
g_assemblages_bpg <-
graph_from_data_frame(unique.data.frame(select(dat, LEVEL_ID, CODE)),
directed = FALSE)
V(g_assemblages_bpg)$type <-
bipartite_mapping(g_assemblages_bpg)$type
#| label: fig-bipartite-graph
#| fig-cap: "Bipartite network of Provenience and Artifact Type."
#| fig-alt: "Bipartite graph plot of proveniences and artifact types."
#| echo: false
#| message: false
#| warning: false
g_assemblages_bpg_layout <-
g_assemblages_bpg %>% layout_as_bipartite()
g_assemblages_bpg %>%
ggraph(layout = g_assemblages_bpg_layout) +
geom_edge_link(edge_color = "gray", edge_alpha = 0.25) +
geom_node_point(aes(color = type)) +
scale_color_manual(
values = c("green", "blue"),
name = "Node Type",
breaks = c(FALSE, TRUE),
labels = c("Provenience", "Artifact")
) +
ggtitle("Bipartite network of Provenience and Artifact Type")
#| label: code-reestablish-environment
#| echo: false
#| message: false
#| warning: false
# Create incidence matrix from bipartite graph -----------------------------
g_assemblages_bpg_inc <- as_incidence_matrix(g_assemblages_bpg)
# Project one-mode graphs, Szymkiewicz-Simpson -----------------------------
overlap_coef_bin <- function(x) {
# Calculate the pairwise sums of non-zero matrix elements to find the number
# of intersecting elements between each input column
bin_intersect_mat <- t(x) %*% x
# Calculate the input column sums to find the individual size of each set
col_sum <- apply(x, 2, function(xx)
sum(xx != 0))
# Find the smaller of each pair of sets by taking the matrix outer minimum
min_set_size_mat <- outer(col_sum, col_sum, FUN = pmin)
# Szymkiewicz-Simpson overlap coefficient is the pairwise intersection of two
# sets divided by the size of the smaller set
res <- bin_intersect_mat / min_set_size_mat
# Set diagonal to identity
diag(res) <- 1L
# Assign input column names to rows and columns of return matrix
dimnames(res) <- list(colnames(x), colnames(x))
return(res)
}
## Project provenience -----------------------------------------------------
prov_adj_ssoc <- overlap_coef_bin(t(g_assemblages_bpg_inc))
prov_ssoc_vals <-
prov_adj_ssoc[lower.tri(prov_adj_ssoc, diag = FALSE)]
## Project artifact types --------------------------------------------------
artifact_adj_ssoc <- overlap_coef_bin(g_assemblages_bpg_inc)
artifact_ssoc_vals <-
artifact_adj_ssoc[lower.tri(artifact_adj_ssoc, diag = FALSE)]
# Project one-mode graphs, Sorenson-Dice -----------------------------------
soren_dice_sim_bin <- function(x) {
# Calculate the pairwise sums of non-zero matrix elements to find the number
# of intersecting elements between each input column
bin_intersect_mat <- t(x) %*% x
# Calculate the input column sums, to find the individual size of each set
col_sum <- apply(x, 2, function(xx)
sum(xx != 0))
# Calculate the matrix outer sums for pairwise sum of set sizes
set_size_sum_mat <- outer(col_sum, col_sum, FUN = "+")
# Sorenson-Dice index is twice the size of the intersection divided by the
# sum of the size for each set
res <- (2 * bin_intersect_mat) / set_size_sum_mat
# Set diagonal to identity
diag(res) <- 1L
# Assign input column names to rows and columns of return matrix
dimnames(res) <- list(colnames(x), colnames(x))
return(res)
}
## Project provenience -----------------------------------------------------
prov_adj_sd <- soren_dice_sim_bin(t(g_assemblages_bpg_inc))
prov_sd_vals <-
prov_adj_sd[lower.tri(prov_adj_sd, diag = FALSE)]
## Project artifact types --------------------------------------------------
artifact_adj_sd <- soren_dice_sim_bin(g_assemblages_bpg_inc)
artifact_sd_vals <-
artifact_adj_sd[lower.tri(artifact_adj_sd, diag = FALSE)]
# Project one-mode graphs, Jaccard ----------------------------------------
jaccard_sim_bin <- function(x) {
# Calculate the pairwise sums of non-zero matrix elements to find the number
# of intersecting elements between each input column
bin_intersect_mat <- t(x) %*% x
# Calculate the input column sums to find the individual size of each set
x_col_sum <- apply(x, 2, function(xx)
sum(xx != 0))
# Calculate the matrix outer sums for pairwise sum of set sizes
set_size_sum_mat <- outer(x_col_sum, x_col_sum, FUN = "+")
# Jaccard index is intersection of set sizes over the size of the union of
# sets
res <- bin_intersect_mat / (set_size_sum_mat - bin_intersect_mat)
# Set diagonal to identity
diag(res) <- 1L
# Assign input column names to rows and columns of return matrix
dimnames(res) <- list(colnames(x), colnames(x))
return(res)
}
## Project provenience -----------------------------------------------------
prov_adj_jacc <- jaccard_sim_bin(t(g_assemblages_bpg_inc))
prov_jacc_vals <-
prov_adj_jacc[lower.tri(prov_adj_jacc, diag = FALSE)]
## Project artifact types --------------------------------------------------
artifact_adj_jacc <- jaccard_sim_bin(g_assemblages_bpg_inc)
artifact_jacc_vals <-
artifact_adj_jacc[lower.tri(artifact_adj_jacc, diag = FALSE)]
# Comparing similarity measures -------------------------------------------
prov_sims <-
data.frame(ssoc = prov_ssoc_vals,
jacc = prov_jacc_vals,
sd = prov_sd_vals)
artifact_sims <-
data.frame(ssoc = artifact_ssoc_vals,
jacc = artifact_jacc_vals,
sd = artifact_sd_vals)
#| label: fig-sim-prov
#| fig-cap: "Similarity measures for proveniences."
#| fig-alt: "Similarity measures for proveniences."
#| echo: false
#| message: false
#| warning: false
# Plot densities by similarity measure
prov_sims %>% stack() %>%
ggplot(aes(x = values)) +
geom_density(color = "green",
alpha = 0.4) +
facet_grid(ind ~ ., scales = "free") +
ggtitle("Similarity Measures for Proveniences")
#| label: fig-sim-artifact
#| fig-cap: "Similarity measures for artifact types."
#| fig-alt: "Similarity measures for artifact types."
#| echo: false
#| message: false
#| warning: false
# Plot densities by similarity measure
artifact_sims %>% stack() %>%
ggplot(aes(x = values)) +
geom_density(color = "blue",
alpha = 0.4) +
facet_grid(ind ~ ., scales = "free") +
ggtitle("Similarity Measures for Artifact Types")
#| label: fig-power-law
#| fig-cap: "Power-law distribution for different values of gamma."
#| fig-alt: "Power-law distribution for different values of gamma."
#| echo: false
#| message: false
#| warning: false
powerlaw_pdf <- function(x, gamma = 1) {
density <- x ^ (-gamma)
return(density)
}
ggplot(data.frame(x = c(1, 251)), aes(x = x)) +
stat_function(fun = powerlaw_pdf, args = list(gamma = 2), aes(color = "2")) +
stat_function(fun = powerlaw_pdf, args = list(gamma = 3), aes(color = "3")) +
stat_function(fun = powerlaw_pdf, args = list(gamma = 4), aes(color = "4")) +
stat_function(fun = powerlaw_pdf, args = list(gamma = 5), aes(color = "5")) +
stat_function(fun = powerlaw_pdf, args = list(gamma = 6), aes(color = "6")) +
labs(color = "Gamma") +
ylab("P(k)") + xlab("k")
#| label: fig-power-law-log
#| fig-cap: "Log-scale power-law distribution for different values of gamma."
#| fig-alt: "Log-scale power-law distribution for different values of gamma."
#| echo: false
#| message: false
#| warning: false
ggplot(data.frame(x = c(1, 251)), aes(x = x)) +
stat_function(fun = powerlaw_pdf, args = list(gamma = 2), aes(color = "2")) +
stat_function(fun = powerlaw_pdf, args = list(gamma = 3), aes(color = "3")) +
stat_function(fun = powerlaw_pdf, args = list(gamma = 4), aes(color = "4")) +
stat_function(fun = powerlaw_pdf, args = list(gamma = 5), aes(color = "5")) +
stat_function(fun = powerlaw_pdf, args = list(gamma = 6), aes(color = "6")) +
scale_y_continuous(trans = "log10") +
labs(color = "Gamma") +
ylab("log P(k)") + xlab("k")
hard_threshold_adjacency <- function(sim_mat, tau) {
return(ifelse(sim_mat < tau, 0, 1))
}
test <- signum_adj(prov_adj_sd, quantile(prov_sims$sd, probs = 0.99))
signum_adj <- function(x, tau) {
return(ifelse(x < tau, 0, 1))
}
test <- signum_adj(prov_adj_sd, quantile(prov_sims$sd, probs = 0.99))
test_g <- igraph::graph_from_adjacency_matrix(test, mode = "undirected", weighted = NULL, diag=FALSE)
plot(test_g, layout=layout_with_fr, vertex.size=2, vertex.label=NA)
test <- signum_adj(prov_adj_sd, quantile(prov_sims$sd, probs = 0.95))
test_g <- igraph::graph_from_adjacency_matrix(test, mode = "undirected", weighted = NULL, diag=FALSE)
plot(test_g, layout=layout_with_fr, vertex.size=2, vertex.label=NA)
test <- signum_adj(prov_adj_sd, quantile(prov_sims$sd, probs = 0.99))
test_g <- igraph::graph_from_adjacency_matrix(test, mode = "undirected", weighted = NULL, diag=FALSE)
plot(test_g, layout=layout_with_fr, vertex.size=2, vertex.label=NA)
test <- signum_adj(prov_adj_ssoc, quantile(prov_sims$ssoc, probs = 0.99))
test_g <- igraph::graph_from_adjacency_matrix(test, mode = "undirected", weighted = NULL, diag=FALSE)
plot(test_g, layout=layout_with_fr, vertex.size=2, vertex.label=NA)
test <- signum_adj(prov_adj_jacc, quantile(prov_sims$jacc, probs = 0.99))
test_g <- igraph::graph_from_adjacency_matrix(test, mode = "undirected", weighted = NULL, diag=FALSE)
plot(test_g, layout=layout_with_fr, vertex.size=2, vertex.label=NA)
test <- signum_adj(artifact_adj_sd, quantile(artifact_sims$sd, probs = 0.99))
test_g <- igraph::graph_from_adjacency_matrix(test, mode = "undirected", weighted = NULL, diag=FALSE)
plot(test_g, layout=layout_with_fr, vertex.size=2, vertex.label=NA)
test <- signum_adj(artifact_adj_ssoc, quantile(artifact_sims$ssoc, probs = 0.99))
test_g <- igraph::graph_from_adjacency_matrix(test, mode = "undirected", weighted = NULL, diag=FALSE)
plot(test_g, layout=layout_with_fr, vertex.size=2, vertex.label=NA)
test <- signum_adj(artifact_adj_jacc, quantile(artifact_sims$jacc, probs = 0.99))
test_g <- igraph::graph_from_adjacency_matrix(test, mode = "undirected", weighted = NULL, diag=FALSE)
plot(test_g, layout=layout_with_fr, vertex.size=2, vertex.label=NA)
plot(degree_distribution(test_g, cumulative = T), log = "xy", type = "l", col="red")
test <- signum_adj(artifact_adj_ssoc, quantile(artifact_sims$ssoc, probs = 0.99))
test_g <- igraph::graph_from_adjacency_matrix(test, mode = "undirected", weighted = NULL, diag=FALSE)
plot(degree_distribution(test_g, cumulative = T), log = "xy", type = "l", col="red")
line(degree_distribution(test_g, cumulative = T), log = "xy", type = "l", col="blue")
line(degree_distribution(test_g, cumulative = T), col="blue")
library(WGCNA)
pickHardThreshold(artifact_adj_ssoc)
pickHardThreshold(artifact_adj_ssoc, dataIsExpr = F)
pickHardThreshold(artifact_adj_jacc, dataIsExpr = F)
pickHardThreshold(artifact_adj_sd, dataIsExpr = F)
View(artifact_adj_jacc)
pickSoftThreshold(artifact_adj_jacc, dataIsExpr = F)
pickSoftThreshold(artifact_adj_sd, dataIsExpr = F)
pickSoftThreshold(artifact_adj_ssoc, dataIsExpr = F)
pickSoftThreshold(prov_adj_ssoc, dataIsExpr = F)
pickSoftThreshold(prov_adj_jacc, dataIsExpr = F)
pickSoftThreshold(prov_adj_sd, dataIsExpr = F)
pickHardThreshold(prov_adj_sd, dataIsExpr = F)
pickHardThreshold(prov_adj_jacc, dataIsExpr = F)
pickHardThreshold(prov_adj_ssoc, dataIsExpr = F)
test <- signum_adj(prov_adj_jacc, 0.4)
test_g <- igraph::graph_from_adjacency_matrix(test, mode = "undirected", weighted = NULL, diag=FALSE)
plot(degree_distribution(test_g, cumulative = T), log = "xy", type = "l", col="red")
plot(test_g, layout=layout_with_fr, vertex.size=2, vertex.label=NA)
quantile(prov_sims$jacc)
quantile(prov_sims$jacc, probs = c(.0, .85, .9, .95, .99))
plot(density(degree(test_g)))
plot(density(prov_sims$jacc))
plot(density(prov_sims$sd))
plot(density(prov_sims$ssoc))
pickSoftThreshold(prov_adj_jacc, dataIsExpr = F, RsquaredCut = 0.8)
pickSoftThreshold(prov_adj_jacc, dataIsExpr = F, RsquaredCut = 0.8, powerVector = c(seq(1, 10, by = 1), seq(12, 40, by = 2)))
pickHardThreshold(prov_adj_jacc, dataIsExpr = F, moreNetworkConcepts = T)
picksoftThreshold(prov_adj_jacc, dataIsExpr = F, moreNetworkConcepts = T)
pickSoftThreshold(prov_adj_jacc, dataIsExpr = F, moreNetworkConcepts = T)
pickHardThreshold(prov_adj_jacc, dataIsExpr = F, moreNetworkConcepts = T, cutVector = seq(0.35, 0.45, by=0.01))
pickHardThreshold(prov_adj_jacc, dataIsExpr = F, moreNetworkConcepts = T)
pickSoftThreshold(artifact_adj_ssoc, dataIsExpr = F, moreNetworkConcepts = T)
pickSoftThreshold(artifact_adj_sd, dataIsExpr = F, moreNetworkConcepts = T)
pickSoftThreshold(artifact_adj_jacc, dataIsExpr = F, moreNetworkConcepts = T)
test_g <- igraph::graph_from_adjacency_matrix(artifact_adj_ssoc^3, mode = "undirected", weighted = NULL, diag=FALSE)
plot(degree_distribution(test_g, cumulative = T), log = "xy", type = "l", col="red")
pickHardThreshold(artifact_adj_ssoc^3, dataIsExpr = F, moreNetworkConcepts = T)
plot(density(artifact_sims$ssoc^3))
plot(degree_distribution(test_g, cumulative = T), log = "xy", type = "l", col="red")
plot(test_g, layout=layout_with_fr, vertex.size=2, vertex.label=NA)
test_g <- igraph::graph_from_adjacency_matrix(signum_adj(artifact_adj_ssoc^3, 0.35), mode = "undirected", weighted = NULL, diag=FALSE)
plot(degree_distribution(test_g, cumulative = T), log = "xy", type = "l", col="red")
plot(test_g, layout=layout_with_fr, vertex.size=2, vertex.label=NA)
test_g <- igraph::graph_from_adjacency_matrix(signum_adj(prov_adj_jacc, 0.4), mode = "undirected", weighted = NULL, diag=FALSE)
plot(test_g, layout=layout_with_fr, vertex.size=2, vertex.label=NA)
plot(density(artifact_adj_ssoc^3))
lines(density(artifact_adj_ssoc^2))
lines(density(artifact_adj_ssoc^1))
plot(density(artifact_adj_ssoc^1), log="xy")
lines(density(artifact_adj_ssoc^2), log="xy", col="blue")
plot(density(artifact_adj_ssoc^1), log="xy")
lines(density(artifact_adj_ssoc^2), log="xy", col="blue")
lines(density(artifact_adj_ssoc^3), log="xy", col="red")
plot(density(artifact_adj_ssoc^3), log="xy")
lines(density(artifact_adj_ssoc^2), log="xy", col="blue")
lines(density(artifact_adj_ssoc^1), log="xy", col="blue")
lines(density(artifact_adj_ssoc^1), log="xy", col="red")
lines(density(artifact_adj_ssoc^4), log="xy", col="green")
plot(density(artifact_adj_ssoc^3, bw=0.1), log="xy")
lines(density(artifact_adj_ssoc^2, bw=0.1), log="xy", col="blue")
lines(density(artifact_adj_ssoc^1, bw=0.1), log="xy", col="red")
plot(density(artifact_adj_ssoc^3, bw=0.1))
lines(density(artifact_adj_ssoc^1, bw=0.1), col="red")
lines(density(artifact_adj_ssoc^2, bw=0.1), col="blue")
lines(density(artifact_adj_ssoc^4, bw=0.1), col="green")
lines(density(artifact_adj_ssoc^5, bw=0.1), col="gray")
test_g <- igraph::graph_from_adjacency_matrix(artifact_adj_ssoc^3, mode = "undirected", weighted = TRUE, diag=FALSE)
plot(test_g, layout=layout_with_fr, vertex.size=2, edge.weight=weight, vertex.label=NA)
library(ggraph)
test_g %>% ggraph(layout = "fr")+geom_edge_link(color = "gray", aes(alpha = weight)) + geom_node_point()
plot(degree_distribution(test_g, cumulative = T), log = "xy", type = "l", col="blue")
plot(degree_distribution(test_g, cumulative = F), log = "xy", type = "l", col="blue")
plot(density(degree(test_g)))
plot(density(degree(test_g), weights = edge.attributes(test_g, weight)))
test_g
plot(density(degree(test_g), weights = edge_attr(test_g, weight)))
plot(density(degree(test_g), weights = edge_attr(test_g, "weight")))
plot(density(edge_attr(test_g, "weight")))
plot(density(edge_attr(test_g, "weight"), bw=0.1))
plot(density(edge_attr(test_g, "weight")))
plot(density(artifact_sims$ssoc))
plot(density(artifact_sims$ssoc^3))
plot(density(artifact_sims$ssoc^3, bw=0.02))
plot(density(artifact_sims$ssoc))
lines(density(artifact_sims$ssoc^3), col="red")
plot(density(artifact_sims$ssoc))
lines(density(artifact_sims$ssoc^3, bw=0.02117), col="red")
plot(seq(0,1,0.1), sigmoid(seq(0,1,0.1)))
## Soft threshold ---------------------------------------------------------
sigmoid <- function(x) {
1.0 / (1.0 + exp(-x))
}
plot(seq(0,1,0.1), sigmoid(seq(0,1,0.1)))
## Soft threshold ---------------------------------------------------------
sigmoid_adj <- function(x) {
1.0 / (1.0 + exp(-x))
}
## Soft threshold ---------------------------------------------------------
sigmoid_adj <- function(x, alpha, tau) {
1.0 / (1.0 + exp(-alpha * (x - tau)))
}
plot(seq(0,1,0.1), sigmoid(seq(0,1,0.1), 10, .5))
plot(seq(0,1,0.1), sigmoid_adj(seq(0,1,0.1), 10, .5))
plot(seq(0,1,0.1), sigmoid_adj(seq(0,1,0.1), 10, .5), type = "l")
plot(seq(0,1,0.05), sigmoid_adj(seq(0,1,0.05), 10, .5), type = "l")
plot(seq(0,1,0.05), sigmoid_adj(seq(0,1,0.05), 10, .8), type = "l")
plot(seq(0,1,0.05), sigmoid_adj(seq(0,1,0.05), 10, mean(artifact_sims$ssoc)), type = "l")
plot(seq(0,1,0.05), sigmoid_adj(seq(0,1,0.05), 4, mean(artifact_sims$ssoc)), type = "l")
mean(artifact_sims$ssoc)
quantile(artifact_sims$ssoc,.9)
quantile(artifact_sims$ssoc,.99)
quantile(artifact_sims$ssoc)
quantile(artifact_sims$jacc)
quantile(artifact_sims$sd)
plot(density(artifact_sims$sd))
plot(seq(0,1,0.05), sigmoid_adj(seq(0,1,0.05), 10, mean(artifact_sims$ssoc)), type = "l")
plot(seq(0,1,0.05), sigmoid_adj(seq(0,1,0.05), 20, mean(artifact_sims$ssoc)), type = "l")
plot(seq(0,1,0.05), sigmoid_adj(seq(0,1,0.05), 50, mean(artifact_sims$ssoc)), type = "l")
x ^ beta
power_adj <- function(x, beta){
x ^ beta
}
plot(seq(0,1,0.05), power_adj(seq(0,1,0.05), 3), type = "l")
hline(0.5)
abline(h=0.5, col="red")
0.5^(1/3)
lines(seq(0,1,0.05), power_adj(seq(0,1,0.05), 6), type = "l", col="blue")
0.5^(1/6)
quantile(artifact_sims$ssoc, 0.95)
quantile(artifact_sims$ssoc, 0.9)
plot(seq(0,1,0.05), signum_adj(seq(0,1,0.05), 0.8), type = "l", col="blue")
plot(seq(0,1,0.005), signum_adj(seq(0,1,0.005), 0.8), type = "l", col="blue")
plot(seq(0,1,length.out=1000), signum_adj(seq(0,1,length.out=1000), 0.8), type = "l", col="blue")
plot(seq(0,1,length.out=10000), signum_adj(seq(0,1,length.out=10000), 0.8), type = "l", col="blue")
lines(seq(0,1,length.out=10000), signum_adj(seq(0,1,length.out=10000), 0.5), type = "l", col="red")
plot(seq(0,1,length.out=10000), power_adj(seq(0,1,length.out=10000), 3), type = "l")
lines(seq(0,1,length.out=10000), signum_adj(seq(0,1,length.out=10000), 0.7937), type = "l", col="red")
histogram(artifact_sims$ssoc^3, bins=30)
hist(artifact_sims$ssoc^3, bins=30)
lines(powerlaw_pdf(seq(0,1,0.01),3)*length(artifact_sims$ssoc), col="red")
plot(density(artifact_sims$ssoc^3))
test_g <- igraph::graph_from_adjacency_matrix(artifact_adj_ssoc^3, mode = "undirected", weighted = NULL, diag=FALSE)
plot(test_g, layout=layout_with_fr, vertex.size=2, vertex.label=NA)
plot(degree_distribution(test_g, cumulative = T), log = "xy", type = "l", col="red")
lines(powerlaw_pdf(seq(0,max(degree(test_g))),3), col="red")
plot(degree_distribution(test_g, cumulative = T), log = "xy", type = "l", col="red")
lines(powerlaw_pdf(seq(0,max(degree(test_g))),3), col="red", log"xy")
lines(powerlaw_pdf(seq(0,max(degree(test_g))),3), col="red", log="xy")
plot(degree_distribution(test_g, cumulative = T), log = "xy", type = "l", col="red")
lines(log(powerlaw_pdf(seq(0,max(degree(test_g))),3)), col="blue")
plot(log(powerlaw_pdf(seq(0,max(degree(test_g))),3)), col="blue")
plot(log10(powerlaw_pdf(seq(0,max(degree(test_g))),3)), col="blue")
ggplot(data.frame(x = c(1, max(degree(test_g)))), aes(x = x)) +
stat_function(fun = powerlaw_pdf, args = list(gamma = 3))+scale_y_continuous(trans = "log10")
heatmap(artifact_adj_ssoc)
heatmap(artifact_adj_ssoc^3)
heatmap((prov_adj_jacc))
plot(seq(0,1,1000), sigmoid_adj(seq(0,1,1000)))
sigmoid_adj <- function(x, alpha = 1, tau = 0.5) {
1.0 / (1.0 + exp(-alpha * (x - tau)))
}
power_adj <- function(x, beta = 1) {
x ^ beta
}
signum_adj <- function(x, tau = 0.5) {
ifelse(x < tau, 0, 1)
}
plot(seq(0,1,1000), sigmoid_adj(seq(0,1,1000)))
plot(seq(0,1,1000), sigmoid_adj(seq(0,1,1000)), type="l")
plot(seq(0,1,0.05), sigmoid_adj(seq(0,1,0.05)), type="l")
sigmoid_adj <- function(x, alpha = 10, tau = 0.5) {
1.0 / (1.0 + exp(-alpha * (x - tau)))
}
plot(seq(0,1,0.05), sigmoid_adj(seq(0,1,0.05)), type="l")
ggplot(data = data.frame(x = degree(g_assemblages_proj_artifact_jacc)), aes(x = x)) +
geom_density(color = "blue") +
ggtitle("Distribution of Jaccard Degree for Artifacts")
test_g %>% ggplot(aes(x=degree, y = ..density..))+geom_density(fill='red')
ggplot(data = data.frame(x = degree(test_g)), aes(x = x)) +
geom_density(color = "blue")
ggplot(data = data.frame(x = degree(test_g)), aes(x = x)) +
geom_density(fill = "blue")
ggplot(data = data.frame(x = degree(test_g)), aes(x = x, y = ..density..)) +
geom_density(fill = "blue")
ggplot(data = data.frame(x = degree(test_g)), aes(x = x, y = after_stat(density))) +
geom_density(fill = "blue")
ggplot(data = data.frame(x = degree(test_g)), aes(x = x, y = after_stat(density))) +
geom_histogram(fill = "blue")
ggplot(data = data.frame(x = degree(test_g)), aes(x = x)) +
geom_histogram(fill = "blue")
ggplot(data = data.frame(x = degree(test_g)), aes(x = x, y = after_stat(density))) +
geom_histogram(fill = "blue") + geom_line(aes(x = c(0,max(degree(test_g))), y = powerlaw_pdf(x,3)))
ggplot(data = data.frame(x = degree(test_g)), aes(x = x, y = after_stat(density))) +
geom_histogram(fill = "blue") + geom_line(aes(x = degree(test_g), y = powerlaw_pdf(x,3)))
ggplot(data = data.frame(x = degree(test_g)), aes(x = x, y = after_stat(density))) +
geom_histogram(fill = "blue") + geom_line(aes(x = degree(test_g), y = powerlaw_pdf(x,3)))+scale_y_continuous(trans = "log10")
ggplot(data = data.frame(x = degree(test_g)), aes(x = x)) +
geom_histogram(fill = "blue")
ggplot(data = data.frame(x = degree(test_g)), aes(x = x, y = after_stat(density))) +
geom_histogram(fill = "blue")
fit_power_law(degree(test_g))
fit_power_law(degree(test_g), implementation = "R.mle")
test_g
test_g <- igraph::graph_from_adjacency_matrix(artifact_adj_ssoc, mode = "undirected", weighted = TRUE, diag=FALSE)
fit_power_law(degree(test_g))
ggplot(data = data.frame(x = degree(test_g)), aes(x = x, y = after_stat(density))) +
geom_histogram(fill = "blue")
ggplot()+geom_line(aes(x = degree(test_g), y = powerlaw_pdf(x,3)), color='red')
ggplot(aes(x = degree(test_g), y = powerlaw_pdf(x,3)))+geom_line(color='red')
ggplot(aes(x = data.frame(degree(test_g)), y = powerlaw_pdf(x,3)))+geom_line(color='red')
ggplot(aes(data.frame(x = degree(test_g)), y = powerlaw_pdf(x,3)))+geom_line(color='red')
ggplot(data = data.frame(x = degree(test_g)), aes(x = x, y = powerlaw_pdf(x,3)))+geom_line(color='red')
ggplot(data = data.frame(x = degree(test_g)), aes(x = x, y = powerlaw_pdf(x,3)))+geom_line(color='red')+scale_y_log10()+scale_x_log10()
fit_power_law(test_g)
fit_power_law(degree(test_g))
test_g <- igraph::graph_from_adjacency_matrix(signum_adj(prov_adj_jacc, 0.4), mode = "undirected", weighted = NULL, diag=FALSE)
fit_power_law(degree(test_g))
fit_power_law(degree(test_g), implementation = "R.mle")
test_g_art <- igraph::graph_from_adjacency_matrix(artifact_adj_ssoc^3, mode = "undirected", weighted = T, diag=FALSE)
fit_power_law(degree(test_g_art))
fit_power_law(degree(test_g_art), implementation = "R.mle")
test_g_art <- igraph::graph_from_adjacency_matrix(artifact_adj_ssoc^4, mode = "undirected", weighted = T, diag=FALSE)
fit_power_law(degree(test_g_art))
